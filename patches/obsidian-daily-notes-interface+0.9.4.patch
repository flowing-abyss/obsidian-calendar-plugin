diff --git a/node_modules/obsidian-daily-notes-interface/dist/main.js b/node_modules/obsidian-daily-notes-interface/dist/main.js
index 5c130dc..80534a1 100644
--- a/node_modules/obsidian-daily-notes-interface/dist/main.js
+++ b/node_modules/obsidian-daily-notes-interface/dist/main.js
@@ -15,6 +15,7 @@ function shouldUsePeriodicNotesSettings(periodicity) {
     const periodicNotes = window.app.plugins.getPlugin("periodic-notes");
     return periodicNotes && periodicNotes.settings?.[periodicity]?.enabled;
 }
+
 /**
  * Read the user settings for the `daily-notes` plugin
  * to keep behavior of creating a new note in-sync.
@@ -42,6 +43,7 @@ function getDailyNoteSettings() {
         console.info("No custom daily note settings found!", err);
     }
 }
+
 /**
  * Read the user settings for the `weekly-notes` plugin
  * to keep behavior of creating a new note in-sync.
@@ -70,6 +72,7 @@ function getWeeklyNoteSettings() {
         console.info("No custom weekly note settings found!", err);
     }
 }
+
 /**
  * Read the user settings for the `periodic-notes` plugin
  * to keep behavior of creating a new note in-sync.
@@ -91,6 +94,7 @@ function getMonthlyNoteSettings() {
         console.info("No custom monthly note settings found!", err);
     }
 }
+
 /**
  * Read the user settings for the `periodic-notes` plugin
  * to keep behavior of creating a new note in-sync.
@@ -112,6 +116,7 @@ function getQuarterlyNoteSettings() {
         console.info("No custom quarterly note settings found!", err);
     }
 }
+
 /**
  * Read the user settings for the `periodic-notes` plugin
  * to keep behavior of creating a new note in-sync.
@@ -147,24 +152,23 @@ function join(...partSegments) {
         const part = parts[i];
         // Remove leading and trailing slashes
         // Also remove "." segments
-        if (!part || part === ".")
-            continue;
+        if (!part || part === ".") continue;
         // Push new path segments.
-        else
-            newParts.push(part);
+        else newParts.push(part);
     }
     // Preserve the initial slash if there was one.
-    if (parts[0] === "")
-        newParts.unshift("");
+    if (parts[0] === "") newParts.unshift("");
     // Turn back into a single string path.
     return newParts.join("/");
 }
+
 function basename(fullPath) {
     let base = fullPath.substring(fullPath.lastIndexOf("/") + 1);
     if (base.lastIndexOf(".") != -1)
         base = base.substring(0, base.lastIndexOf("."));
     return base;
 }
+
 async function ensureFolderExists(path) {
     const dirs = path.replace(/\\/g, "/").split("/");
     dirs.pop(); // remove basename
@@ -175,6 +179,7 @@ async function ensureFolderExists(path) {
         }
     }
 }
+
 async function getNotePath(directory, filename) {
     if (!filename.endsWith(".md")) {
         filename += ".md";
@@ -183,6 +188,7 @@ async function getNotePath(directory, filename) {
     await ensureFolderExists(path);
     return path;
 }
+
 async function getTemplateInfo(template) {
     const { metadataCache, vault } = window.app;
     const templatePath = obsidian.normalizePath(template);
@@ -211,9 +217,11 @@ function getDateUID(date, granularity = "day") {
     const ts = date.clone().startOf(granularity).format();
     return `${granularity}-${ts}`;
 }
+
 function removeEscapedCharacters(format) {
     return format.replace(/\[[^\]]*\]/g, ""); // remove everything within brackets
 }
+
 /**
  * XXX: When parsing dates that contain both week numbers and months,
  * Moment choses to ignore the week numbers. For the week dateUID, we
@@ -222,17 +230,22 @@ function removeEscapedCharacters(format) {
 function isFormatAmbiguous(format, granularity) {
     if (granularity === "week") {
         const cleanFormat = removeEscapedCharacters(format);
-        return (/w{1,2}/i.test(cleanFormat) &&
-            (/M{1,4}/.test(cleanFormat) || /D{1,4}/.test(cleanFormat)));
+        return (
+            /w{1,2}/i.test(cleanFormat) &&
+            (/M{1,4}/.test(cleanFormat) || /D{1,4}/.test(cleanFormat))
+        );
     }
     return false;
 }
+
 function getDateFromFile(file, granularity) {
     return getDateFromFilename(file.basename, granularity);
 }
+
 function getDateFromPath(path, granularity) {
     return getDateFromFilename(basename(path), granularity);
 }
+
 function getDateFromFilename(filename, granularity) {
     const getSettings = {
         day: getDailyNoteSettings,
@@ -250,17 +263,20 @@ function getDateFromFilename(filename, granularity) {
         if (granularity === "week") {
             const cleanFormat = removeEscapedCharacters(format);
             if (/w{1,2}/i.test(cleanFormat)) {
-                return window.moment(filename, 
-                // If format contains week, remove day & month formatting
-                format.replace(/M{1,4}/g, "").replace(/D{1,4}/g, ""), false);
+                return window.moment(
+                    filename,
+                    // If format contains week, remove day & month formatting
+                    format.replace(/M{1,4}/g, "").replace(/D{1,4}/g, ""),
+                    false
+                );
             }
         }
     }
     return noteDate;
 }
 
-class DailyNotesFolderMissingError extends Error {
-}
+class DailyNotesFolderMissingError extends Error {}
+
 /**
  * This function mimics the behavior of the daily-notes plugin
  * so it will replace {{date}}, {{title}}, and {{time}} with the
@@ -277,27 +293,39 @@ async function createDailyNote(date) {
     const filename = date.format(format);
     const normalizedPath = await getNotePath(folder, filename);
     try {
-        const createdFile = await vault.create(normalizedPath, templateContents
-            .replace(/{{\s*date\s*}}/gi, filename)
-            .replace(/{{\s*time\s*}}/gi, moment().format("HH:mm"))
-            .replace(/{{\s*title\s*}}/gi, filename)
-            .replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
-            const now = moment();
-            const currentDate = date.clone().set({
-                hour: now.get("hour"),
-                minute: now.get("minute"),
-                second: now.get("second"),
-            });
-            if (calc) {
-                currentDate.add(parseInt(timeDelta, 10), unit);
-            }
-            if (momentFormat) {
-                return currentDate.format(momentFormat.substring(1).trim());
-            }
-            return currentDate.format(format);
-        })
-            .replace(/{{\s*yesterday\s*}}/gi, date.clone().subtract(1, "day").format(format))
-            .replace(/{{\s*tomorrow\s*}}/gi, date.clone().add(1, "d").format(format)));
+        const createdFile = await vault.create(
+            normalizedPath,
+            templateContents
+                .replace(/{{\s*date\s*}}/gi, filename)
+                .replace(/{{\s*time\s*}}/gi, moment().format("HH:mm"))
+                .replace(/{{\s*title\s*}}/gi, filename)
+                .replace(
+                    /{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,
+                    (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
+                        const now = moment();
+                        const currentDate = date.clone().set({
+                            hour: now.get("hour"),
+                            minute: now.get("minute"),
+                            second: now.get("second"),
+                        });
+                        if (calc) {
+                            currentDate.add(parseInt(timeDelta, 10), unit);
+                        }
+                        if (momentFormat) {
+                            return currentDate.format(momentFormat.substring(1).trim());
+                        }
+                        return currentDate.format(format);
+                    }
+                )
+                .replace(
+                    /{{\s*yesterday\s*}}/gi,
+                    date.clone().subtract(1, "day").format(format)
+                )
+                .replace(
+                    /{{\s*tomorrow\s*}}/gi,
+                    date.clone().add(1, "d").format(format)
+                )
+        );
         // eslint-disable-next-line @typescript-eslint/no-explicit-any
         app.foldManager.save(createdFile, IFoldInfo);
         return createdFile;
@@ -307,16 +335,20 @@ async function createDailyNote(date) {
         new obsidian.Notice("Unable to create new file.");
     }
 }
+
 function getDailyNote(date, dailyNotes) {
     return dailyNotes[getDateUID(date, "day")] ?? null;
 }
+
 function getAllDailyNotes() {
     /**
      * Find all daily notes in the daily note folder
      */
     const { vault } = window.app;
     const { folder } = getDailyNoteSettings();
-    const dailyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
+    const dailyNotesFolder = vault.getAbstractFileByPath(
+        obsidian.normalizePath(folder)
+    );
     if (!dailyNotesFolder) {
         throw new DailyNotesFolderMissingError("Failed to find daily notes folder");
     }
@@ -333,8 +365,8 @@ function getAllDailyNotes() {
     return dailyNotes;
 }
 
-class WeeklyNotesFolderMissingError extends Error {
-}
+class WeeklyNotesFolderMissingError extends Error {}
+
 function getDaysOfWeek() {
     const { moment } = window;
     // eslint-disable-next-line @typescript-eslint/no-explicit-any
@@ -354,9 +386,11 @@ function getDaysOfWeek() {
     }
     return daysOfWeek;
 }
+
 function getDayOfWeekNumericalValue(dayOfWeekName) {
     return getDaysOfWeek().indexOf(dayOfWeekName.toLowerCase());
 }
+
 async function createWeeklyNote(date) {
     const { vault } = window.app;
     const { template, format, folder } = getWeeklyNoteSettings();
@@ -364,28 +398,37 @@ async function createWeeklyNote(date) {
     const filename = date.format(format);
     const normalizedPath = await getNotePath(folder, filename);
     try {
-        const createdFile = await vault.create(normalizedPath, templateContents
-            .replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
-            const now = window.moment();
-            const currentDate = date.clone().set({
-                hour: now.get("hour"),
-                minute: now.get("minute"),
-                second: now.get("second"),
-            });
-            if (calc) {
-                currentDate.add(parseInt(timeDelta, 10), unit);
-            }
-            if (momentFormat) {
-                return currentDate.format(momentFormat.substring(1).trim());
-            }
-            return currentDate.format(format);
-        })
-            .replace(/{{\s*title\s*}}/gi, filename)
-            .replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm"))
-            .replace(/{{\s*(sunday|monday|tuesday|wednesday|thursday|friday|saturday)\s*:(.*?)}}/gi, (_, dayOfWeek, momentFormat) => {
-            const day = getDayOfWeekNumericalValue(dayOfWeek);
-            return date.weekday(day).format(momentFormat.trim());
-        }));
+        const createdFile = await vault.create(
+            normalizedPath,
+            templateContents
+                .replace(
+                    /{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,
+                    (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
+                        const now = window.moment();
+                        const currentDate = date.clone().set({
+                            hour: now.get("hour"),
+                            minute: now.get("minute"),
+                            second: now.get("second"),
+                        });
+                        if (calc) {
+                            currentDate.add(parseInt(timeDelta, 10), unit);
+                        }
+                        if (momentFormat) {
+                            return currentDate.format(momentFormat.substring(1).trim());
+                        }
+                        return currentDate.format(format);
+                    }
+                )
+                .replace(/{{\s*title\s*}}/gi, filename)
+                .replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm"))
+                .replace(
+                    /{{\s*(sunday|monday|tuesday|wednesday|thursday|friday|saturday)\s*:(.*?)}}/gi,
+                    (_, dayOfWeek, momentFormat) => {
+                        const day = getDayOfWeekNumericalValue(dayOfWeek);
+                        return date.weekday(day).format(momentFormat.trim());
+                    }
+                )
+        );
         // eslint-disable-next-line @typescript-eslint/no-explicit-any
         window.app.foldManager.save(createdFile, IFoldInfo);
         return createdFile;
@@ -395,9 +438,11 @@ async function createWeeklyNote(date) {
         new obsidian.Notice("Unable to create new file.");
     }
 }
+
 function getWeeklyNote(date, weeklyNotes) {
     return weeklyNotes[getDateUID(date, "week")] ?? null;
 }
+
 function getAllWeeklyNotes() {
     const weeklyNotes = {};
     if (!appHasWeeklyNotesPluginLoaded()) {
@@ -405,7 +450,9 @@ function getAllWeeklyNotes() {
     }
     const { vault } = window.app;
     const { folder } = getWeeklyNoteSettings();
-    const weeklyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
+    const weeklyNotesFolder = vault.getAbstractFileByPath(
+        obsidian.normalizePath(folder)
+    );
     if (!weeklyNotesFolder) {
         throw new WeeklyNotesFolderMissingError("Failed to find weekly notes folder");
     }
@@ -421,8 +468,8 @@ function getAllWeeklyNotes() {
     return weeklyNotes;
 }
 
-class MonthlyNotesFolderMissingError extends Error {
-}
+class MonthlyNotesFolderMissingError extends Error {}
+
 /**
  * This function mimics the behavior of the daily-notes plugin
  * so it will replace {{date}}, {{title}}, and {{time}} with the
@@ -437,25 +484,31 @@ async function createMonthlyNote(date) {
     const filename = date.format(format);
     const normalizedPath = await getNotePath(folder, filename);
     try {
-        const createdFile = await vault.create(normalizedPath, templateContents
-            .replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
-            const now = window.moment();
-            const currentDate = date.clone().set({
-                hour: now.get("hour"),
-                minute: now.get("minute"),
-                second: now.get("second"),
-            });
-            if (calc) {
-                currentDate.add(parseInt(timeDelta, 10), unit);
-            }
-            if (momentFormat) {
-                return currentDate.format(momentFormat.substring(1).trim());
-            }
-            return currentDate.format(format);
-        })
-            .replace(/{{\s*date\s*}}/gi, filename)
-            .replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm"))
-            .replace(/{{\s*title\s*}}/gi, filename));
+        const createdFile = await vault.create(
+            normalizedPath,
+            templateContents
+                .replace(
+                    /{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,
+                    (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
+                        const now = window.moment();
+                        const currentDate = date.clone().set({
+                            hour: now.get("hour"),
+                            minute: now.get("minute"),
+                            second: now.get("second"),
+                        });
+                        if (calc) {
+                            currentDate.add(parseInt(timeDelta, 10), unit);
+                        }
+                        if (momentFormat) {
+                            return currentDate.format(momentFormat.substring(1).trim());
+                        }
+                        return currentDate.format(format);
+                    }
+                )
+                .replace(/{{\s*date\s*}}/gi, filename)
+                .replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm"))
+                .replace(/{{\s*title\s*}}/gi, filename)
+        );
         // eslint-disable-next-line @typescript-eslint/no-explicit-any
         window.app.foldManager.save(createdFile, IFoldInfo);
         return createdFile;
@@ -465,9 +518,11 @@ async function createMonthlyNote(date) {
         new obsidian.Notice("Unable to create new file.");
     }
 }
+
 function getMonthlyNote(date, monthlyNotes) {
     return monthlyNotes[getDateUID(date, "month")] ?? null;
 }
+
 function getAllMonthlyNotes() {
     const monthlyNotes = {};
     if (!appHasMonthlyNotesPluginLoaded()) {
@@ -475,7 +530,9 @@ function getAllMonthlyNotes() {
     }
     const { vault } = window.app;
     const { folder } = getMonthlyNoteSettings();
-    const monthlyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
+    const monthlyNotesFolder = vault.getAbstractFileByPath(
+        obsidian.normalizePath(folder)
+    );
     if (!monthlyNotesFolder) {
         throw new MonthlyNotesFolderMissingError("Failed to find monthly notes folder");
     }
@@ -491,8 +548,8 @@ function getAllMonthlyNotes() {
     return monthlyNotes;
 }
 
-class QuarterlyNotesFolderMissingError extends Error {
-}
+class QuarterlyNotesFolderMissingError extends Error {}
+
 /**
  * This function mimics the behavior of the daily-notes plugin
  * so it will replace {{date}}, {{title}}, and {{time}} with the
@@ -507,25 +564,31 @@ async function createQuarterlyNote(date) {
     const filename = date.format(format);
     const normalizedPath = await getNotePath(folder, filename);
     try {
-        const createdFile = await vault.create(normalizedPath, templateContents
-            .replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
-            const now = window.moment();
-            const currentDate = date.clone().set({
-                hour: now.get("hour"),
-                minute: now.get("minute"),
-                second: now.get("second"),
-            });
-            if (calc) {
-                currentDate.add(parseInt(timeDelta, 10), unit);
-            }
-            if (momentFormat) {
-                return currentDate.format(momentFormat.substring(1).trim());
-            }
-            return currentDate.format(format);
-        })
-            .replace(/{{\s*date\s*}}/gi, filename)
-            .replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm"))
-            .replace(/{{\s*title\s*}}/gi, filename));
+        const createdFile = await vault.create(
+            normalizedPath,
+            templateContents
+                .replace(
+                    /{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,
+                    (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
+                        const now = window.moment();
+                        const currentDate = date.clone().set({
+                            hour: now.get("hour"),
+                            minute: now.get("minute"),
+                            second: now.get("second"),
+                        });
+                        if (calc) {
+                            currentDate.add(parseInt(timeDelta, 10), unit);
+                        }
+                        if (momentFormat) {
+                            return currentDate.format(momentFormat.substring(1).trim());
+                        }
+                        return currentDate.format(format);
+                    }
+                )
+                .replace(/{{\s*date\s*}}/gi, filename)
+                .replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm"))
+                .replace(/{{\s*title\s*}}/gi, filename)
+        );
         // eslint-disable-next-line @typescript-eslint/no-explicit-any
         window.app.foldManager.save(createdFile, IFoldInfo);
         return createdFile;
@@ -535,9 +598,11 @@ async function createQuarterlyNote(date) {
         new obsidian.Notice("Unable to create new file.");
     }
 }
+
 function getQuarterlyNote(date, quarterly) {
     return quarterly[getDateUID(date, "quarter")] ?? null;
 }
+
 function getAllQuarterlyNotes() {
     const quarterly = {};
     if (!appHasQuarterlyNotesPluginLoaded()) {
@@ -545,7 +610,9 @@ function getAllQuarterlyNotes() {
     }
     const { vault } = window.app;
     const { folder } = getQuarterlyNoteSettings();
-    const quarterlyFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
+    const quarterlyFolder = vault.getAbstractFileByPath(
+        obsidian.normalizePath(folder)
+    );
     if (!quarterlyFolder) {
         throw new QuarterlyNotesFolderMissingError("Failed to find quarterly notes folder");
     }
@@ -561,8 +628,8 @@ function getAllQuarterlyNotes() {
     return quarterly;
 }
 
-class YearlyNotesFolderMissingError extends Error {
-}
+class YearlyNotesFolderMissingError extends Error {}
+
 /**
  * This function mimics the behavior of the daily-notes plugin
  * so it will replace {{date}}, {{title}}, and {{time}} with the
@@ -577,25 +644,31 @@ async function createYearlyNote(date) {
     const filename = date.format(format);
     const normalizedPath = await getNotePath(folder, filename);
     try {
-        const createdFile = await vault.create(normalizedPath, templateContents
-            .replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
-            const now = window.moment();
-            const currentDate = date.clone().set({
-                hour: now.get("hour"),
-                minute: now.get("minute"),
-                second: now.get("second"),
-            });
-            if (calc) {
-                currentDate.add(parseInt(timeDelta, 10), unit);
-            }
-            if (momentFormat) {
-                return currentDate.format(momentFormat.substring(1).trim());
-            }
-            return currentDate.format(format);
-        })
-            .replace(/{{\s*date\s*}}/gi, filename)
-            .replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm"))
-            .replace(/{{\s*title\s*}}/gi, filename));
+        const createdFile = await vault.create(
+            normalizedPath,
+            templateContents
+                .replace(
+                    /{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,
+                    (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
+                        const now = window.moment();
+                        const currentDate = date.clone().set({
+                            hour: now.get("hour"),
+                            minute: now.get("minute"),
+                            second: now.get("second"),
+                        });
+                        if (calc) {
+                            currentDate.add(parseInt(timeDelta, 10), unit);
+                        }
+                        if (momentFormat) {
+                            return currentDate.format(momentFormat.substring(1).trim());
+                        }
+                        return currentDate.format(format);
+                    }
+                )
+                .replace(/{{\s*date\s*}}/gi, filename)
+                .replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm"))
+                .replace(/{{\s*title\s*}}/gi, filename)
+        );
         // eslint-disable-next-line @typescript-eslint/no-explicit-any
         window.app.foldManager.save(createdFile, IFoldInfo);
         return createdFile;
@@ -605,9 +678,11 @@ async function createYearlyNote(date) {
         new obsidian.Notice("Unable to create new file.");
     }
 }
+
 function getYearlyNote(date, yearlyNotes) {
     return yearlyNotes[getDateUID(date, "year")] ?? null;
 }
+
 function getAllYearlyNotes() {
     const yearlyNotes = {};
     if (!appHasYearlyNotesPluginLoaded()) {
@@ -615,7 +690,9 @@ function getAllYearlyNotes() {
     }
     const { vault } = window.app;
     const { folder } = getYearlyNoteSettings();
-    const yearlyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
+    const yearlyNotesFolder = vault.getAbstractFileByPath(
+        obsidian.normalizePath(folder)
+    );
     if (!yearlyNotesFolder) {
         throw new YearlyNotesFolderMissingError("Failed to find yearly notes folder");
     }
@@ -642,6 +719,7 @@ function appHasDailyNotesPluginLoaded() {
     const periodicNotes = app.plugins.getPlugin("periodic-notes");
     return periodicNotes && periodicNotes.settings?.daily?.enabled;
 }
+
 /**
  * XXX: "Weekly Notes" live in either the Calendar plugin or the periodic-notes plugin.
  * Check both until the weekly notes feature is removed from the Calendar plugin.
@@ -656,24 +734,31 @@ function appHasWeeklyNotesPluginLoaded() {
     const periodicNotes = app.plugins.getPlugin("periodic-notes");
     return periodicNotes && periodicNotes.settings?.weekly?.enabled;
 }
+
 function appHasMonthlyNotesPluginLoaded() {
+    return true; // override
     const { app } = window;
     // eslint-disable-next-line @typescript-eslint/no-explicit-any
     const periodicNotes = app.plugins.getPlugin("periodic-notes");
     return periodicNotes && periodicNotes.settings?.monthly?.enabled;
 }
+
 function appHasQuarterlyNotesPluginLoaded() {
+    return true; // override
     const { app } = window;
     // eslint-disable-next-line @typescript-eslint/no-explicit-any
     const periodicNotes = app.plugins.getPlugin("periodic-notes");
     return periodicNotes && periodicNotes.settings?.quarterly?.enabled;
 }
+
 function appHasYearlyNotesPluginLoaded() {
+    return true; // override
     const { app } = window;
     // eslint-disable-next-line @typescript-eslint/no-explicit-any
     const periodicNotes = app.plugins.getPlugin("periodic-notes");
     return periodicNotes && periodicNotes.settings?.yearly?.enabled;
 }
+
 function getPeriodicNoteSettings(granularity) {
     const getSettings = {
         day: getDailyNoteSettings,
@@ -684,6 +769,7 @@ function getPeriodicNoteSettings(granularity) {
     }[granularity];
     return getSettings();
 }
+
 function createPeriodicNote(granularity, date) {
     const createFn = {
         day: createDailyNote,
